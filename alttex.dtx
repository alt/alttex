% \iffalse
% This is alttex.dtx, a small experimental package.
%
%% This software is copyright, 2008, Arno L. Trautmann
%% 
%% This program is free software; you can redistribute it and/or
%% modify it under the terms of the GNU General Public License
%% as published by the Free Software Foundation; either version 2
%% of the License, or (at your option) any later version.
%% 
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%% 
%% You should have received a copy of the GNU General Public License
%% along with this program; if not, write to the Free Software
%% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
%% 
%% Author: Arno L. Trautmann, arno.trautmann@gmx.de
%%
%
%<+package|driver>
%<+package>\NeedsTeXFormat{LaTeX2e}
%<+package>\ProvidesPackage{alttex}[2008/12/17 \space0.a\space textpos]
%<+package>\typeout{Package: `alttex' 0.a\space<2008/12/17 >}
%
%<*driver>
%\documentclass[12pt]{ltxdoc}
% \usepackage{alttex}
\documentclass{ltxdoc}
\usepackage{
xltxtra,
lmodern
}

\title{The \textsf{alttex} package}
\author{Arno L. Trautmann\thanks{arno.trautmann@gmx.de}}
\date{Version 0.a, 2008 December 17}
\begin{document}
\maketitle
\DocInput{alttex.dtx}
\end{document}
%</driver>
%
% \fi
% 
% This is the package \verb~alttex~ which will try to give an experimental new way to write \LaTeX code. So far it is mostly done with very dirty and actually it’s a collection of things I think about in boring lectures. Maybe someone will have fun with the following code.
% \tableofcontents
% \section{introduction}
% The problem I have with \LaTeX{} is the antique way of typing. Because most people still use a hopeless outdated keyboard layout („qertzy“ or slightly adapted versions of that), \LaTeX doesn’t make use of some cool features. I’m not talking about writing chinese or arabic text. Maybe this example will make the idea clear:
% 
% In standard \LaTeX, one has to write
% \begin{verbatim}
% This is the normal text, then comes the itemization:
% \begin{itemize}
%   \item text for first item
%   \item \begin{itemize}
%         \item this is an item inside an item…
%         \item another item
%         \end{itemize}
%   \item and the outer itemize goes on…
% \end{itemize}
% \end{verbatim}
% 
% Using this package, you can simply write\footnote{The lmodern font I’m using here does not have the symbol for the inner item…}
% \begin{verbatim}
% This is the normal text, then comes the itemization:
% 
% • text for first itemi
% • 
% 
%   ‣ this is an item inside an item
%   ‣ another item
%   
% • and the outer itemize goes on…
% 
% And your normal text goes on…
% \end{verbatim}
% Well, actually I’m lying now. But it’s the aim of this package to provide this – besides many, many other funny and cool things. I have just started it, there will be much more stuff here.
%    \begin{macrocode}
\ProvidesPackage{alttex}

\RequirePackage{exscale} % For huge math

\catcode`\•=\active
\catcode`\‣=\active

%    \end{macrocode}
% \section{Math stuff}
% \subsection{braces}
% \begin{macro}{\newbraces}
% \begin{macro}{\oldbraces}
% Now this is something most \LaTeX-beginners don’t recognize and wonder why the formula looks so ugly: The braces () do not fit to the hight of the formula. This can be achieved by putting |\left| and |\right| in front of the braces. But actually, this is annoying! In almost any case you want this behaviour, so this should be the standard. So we redefine the way braces are handled. With |\newbraces| the ( ) always fit. If you prefer the normal \LaTeX\ way, use |\oldbraces| to reset everything. This new behaviour should be extended to other characters like \verb~| [ { <~ and so on. Maybe in version 0.0.1…
% 
% I would have never been able to implement this without the help of the mailinglist members of |TEX-D-L@LISTSERV.DFN.DE|!
% 
% The redefinition of |\mathstrut| is necessary when using amsmath (you will use amsmath when typesetting formulae, won’t you?), because the hight of formulae is determinated by the hight of a brace. But using ( ) as |\active| characters, we need another brace here. So we take |[|. This will probably also change. But the code is working fine for ( ).
%    \begin{macrocode}
\makeatletter
\def\resetMathstrut@{%
  \setbox\z@\hbox{%
    \mathchardef\@tempa\mathcode`\[\relax
    \def\@tempb##1"##2##3{\the\textfont"##3\char"}%
    \expandafter\@tempb\meaning\@tempa \relax
}%
  \ht\Mathstrutbox@\ht\z@ \dp\Mathstrutbox@\dp\z@
}
\makeatother

\edef\oldbraces{
  \mathcode`(\the\mathcode`(
  \mathcode`)\the\mathcode`)
}
\begingroup
  \catcode`(\active \xdef({\left\string(}
  \catcode`)\active \xdef){\right\string)}
\endgroup
\def\newbraces{

  \mathcode`("8000
  \mathcode`)"8000
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \section{itemize and similar things}
%    \begin{macrocode}

\newcounter{itemi}
\setcounter{itemi}{0}

\def•{
  \ifvmode \ifnum \theitemi = 0 %außerhalb einer itemize
    \begin{itemize}\setcounter{itemi}{1}
      \item
    \else
      \item %zum Fortsetzen einer Liste
    \fi
  \else
    \item % normales item innerhalb einer Liste
  \fi
}

\def‣{
  \ifvmode
    \begin{itemize}
      \item
  \else
    \item
  \fi
}

\def\—{\end{itemize}}


\newcounter{insideitemize}
\setcounter{insideitemize}{0}
\newcounter{insideitem}
\setcounter{insideitem}{0}

\catcode`\•=\active

\iffalse
\def•{
  \ifnum \theinsideitemize = 0 % Außerhalb einer itemize-Umgebung ⇒ initialisieren
    \begin{itemize}
      \iffalse
      \catcode`\^^M=\active
      \def^^M{\myeol} \catcode`\^^M=5%
      \fi
      \setcounter{insideitemize}{1} % Nun innerhalb einer itemize
      \setcounter{insideitem}{1}% und innerhalb eines Items
      \expandafter\item
  \else
    \makeatletter
      \ifthenelse{\boolean{@inlabel}}{%
    \makeatother
      tach
}{%
    \makeatother
      \setcounter{insideitem}{1}% innerhalb eines items
      \expandafter\item
}
  \fi
}
\fi

\def\myeol{%
  \ifnum \theinsideitem = 0%
    \end{itemize}%
    \catcode`\^^M=5%
    \setcounter{insideitem}{0}%
  \else%
    \setcounter{insideitem}{0}%
\fi%
}
% \end{macrocode}

% Definiert eine übergroße Displaystyle-Formel – nützlich z.B. bei Präsentationen.
\def\hugedisplaymath{
\makeatletter
\def\fontsize@before@hugemath{}
\makeatother
\Huge
  \begin{equation*}
}
\def\endhugedisplaymath{
  \end{equation*}
}
%    \end{macrocode}
% \Finale
\endinput