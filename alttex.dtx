% \iffalse
% This is alttex.dtx, a small experimental package.
%
%% This software is copyright, 2008, Arno L. Trautmann
%% 
%% This program is free software; you can redistribute it and/or
%% modify it under the terms of the GNU General Public License
%% as published by the Free Software Foundation; either version 2
%% of the License, or (at your option) any later version.
%% 
%% This program is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU General Public License for more details.
%% 
%% You should have received a copy of the GNU General Public License
%% along with this program; if not, write to the Free Software
%% Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
%% 
%% Author: Arno L. Trautmann, arno dot trautmann at gmx dot de
%%
%
%<+package|driver>
%<+package>\NeedsTeXFormat{LaTeX2e}
%<+package>\ProvidesPackage{alttex}[2008/12/17 \space0.a\space textpos]
%<+package>\typeout{Package: `alttex' 0.a\space<2008/12/17 >}
%
%<*driver>
%\documentclass[12pt]{ltxdoc}
% \usepackage{alttex}
\documentclass{ltxdoc}
\usepackage{ifxetex}
\ifxetex
  \usepackage{xltxtra}
\else
  \errmessage{No XeLaTeX, no alttex. See the log for more information.}  
  \typeout{^^J%
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^^J%
  ! This package can only be compiled with XeLaTeX.^^J%
  ! pdfLaTeX cannot handle unicode the way it is used here.^^J%
  ! If you want to have support for [utf8]inputenc,^^J%
  ! please contact the author.^^J%
  ! If you want to use LuaLaTeX, give it a try:^^J%
  ! comment out the lines 32,33,35–43.^^J%
  ! Please e-mail me the result of your experiences!^^J%
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^^J%
  }
  \endinput
\fi

\usepackage{todonotes}

\title{The \textsf{alttex} package}
\author{Arno L. Trautmann\thanks{arno.trautmann@gmx.de}}
\date{Version 0.a, 2008 December 17}
\begin{document}
\maketitle
\DocInput{alttex.dtx}
\end{document}
%</driver>
%
% \fi
% 
% This is the package \verb~alttex~ which will try to give an experimental new way to write \XeLaTeX\ code. So far it is mostly done with very dirty code and actually it’s a collection of things that come into my mind during boring lectures. Maybe someone will have fun with the following code fragments.
% \tableofcontents
% \newpage
% \section{introduction}
% The problem I have with \LaTeX\footnote{I’ll write \LaTeX{} instead of \XeLaTeX—saves me two keystrokes. Most of the code below \emph{only} works with \XeLaTeX. If you need support for [utf8]inputenc or Lua\LaTeX, please contact the author.}  is the antique way of typing. Because most people still use a hopelessly outdated keyboard layout („qwerty“ or slightly adapted versions of that), \LaTeX{} doesn’t make use of some cool features. I’m not talking about writing chinese or arabic text! Maybe this example will make the idea clear:
% 
% In standard \LaTeX, one has to write
% \begin{verbatim}
% This is the normal text, then comes the itemization:
% \begin{itemize}
%   \item text for first item
%   \item \begin{itemize}
%         \item this is an item inside an item…
%         \item[$\Rightarrow$] Here an item with a formula: $\int_a^b x^2 dx$
%         \end{itemize}
%   \item and the outer itemize goes on…
% \end{itemize}
% \end{verbatim}
% 
% Using this package and having a superior keyboard layout\footnote{E.\,g. the ergonomic layut NEO.}, you can simply write:\footnote{The lmodern font I’m using here does not have the symbol for the inner item , so we change to DejaVu Sans Mono here.}
% {\setmonofont[Scale=0.85]{DejaVu Sans Mono}
% \begin{verbatim}
% This is the normal text, then comes the itemization:
% 
% • text for first item
% • 
% 
%   ‣ this is an item inside an item
%   ‣[⇒] Here an item with a formula: $∫_a^b x² dx$
%   
% • and the outer itemize goes on…
% 
% And your normal text goes on…
% \end{verbatim}}
% Well, actually I’m lying now because this is not fully implemented so far. But it’s the aim of this package to provide this – besides many, many other funny and cool things. The aim is to offer a more „wysiwyg“ way, without loosing anything of logical markup. One still can re|\def|ine the |•| if he doesn’t like the way his items look.
% I have just started to write the package, there will be much more stuff here in the future.
% 
% Ok, enough blahblah, now comes the code. We begin with the mostly uninteresting preamble stuff:
%    \begin{macrocode}
\ProvidesPackage{alttex}

\RequirePackage{amsmath}
\RequirePackage{exscale}
\RequirePackage{ifxetex}
\ifxetex
\typeout{Loading XeTeX, everything’s fine.}
\else
  \typeout{^^J%
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^^J%
  ! This package can only be compiled with XeLaTeX.^^J%
  ! pdfLaTeX cannot handle unicode the way it is used here.^^J%
  ! If you want to have support for [utf8]inputenc, please contact the author.^^J%
  ! If you want to use LuaLaTeX, give it a try:^^J%
  ! comment out the lines 32,33,35–43.^^J%
  ! Please e-mail me the result of your experiences!^^J%
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^^J%
  }
  \errmessage{No XeLaTeX, no alttex. See the log for more information.}
  \endinput
\fi

%    \end{macrocode}
% We need |exscale| to write really big formulae, and |ifxetex| to check wether one uses the correct engine.
% \section{Textmode}
% \subsection{no escape}
% \begin{macro}{\noescape}
% You want to write plain text. Maybe you’re annoyed by always escaping characters like \_ \^ \# \& \{ \} \$ \textasciitilde{} and so on. |\noescape| allows you to never escape anything—except the \textbackslash, which still might be used for |\textit{}| or so. Or maybe not… because the \{ \} are not escaped. Have to think about this one. Maybe the \textbackslash{} will be redefined to define \{ \} by itself.
%    \begin{macrocode}
\def\noescape{
  \catcode`\_= 11%
  \catcode`\^= 11%
  \catcode`\#= 11%
  \catcode`\&= 11%
  %\catcode`\{= 11%
  %\catcode`\}= 11%
  \catcode`\$= 11%
  \catcode`\~= 11%
  \makeatletter% I just noticed this is not necessary… but I’ll leave it for some strange \thin@gs or so…
  \catcode`\%= 11
}
%    \end{macrocode}l
% \end{macro}
% \begin{macro}{\oldescape}
% Of course this has to be reset when doing anything like formula, tabular etc. Maybe I will be able to change the behaviour automatically. Thas idea has been inspired by a discussion on the Con\TeX{}t mailinglist.
%    \begin{macrocode}
\def\oldescape{
  \catcode`\%= 14%
  \catcode`\_= 8%
  \catcode`\^= 7%
  \catcode`\#= 6%
  \catcode`\&= 4%
  %\catcode`\{= 1%
  %\catcode`\}= 2%
  \catcode`\$= 3%
  \catcode`\~= 13%
  \makeatother%
}
%    \end{macrocode}

% \end{macro}

% \section{Math stuff}
% \subsection{braces}
% \begin{macro}{\newbraces}
% \begin{macro}{\oldbraces}
% Now this is something most \LaTeX-beginners don’t recognize and wonder why the formula looks so ugly: The braces () do not fit to the hight of the formula. This can be achieved by putting |\left| and |\right| in front of the braces. But actually, this is annoying! In almost any case you want this behaviour, so this should be the standard. So we redefine the way braces are handled. With |\newbraces| the ( ) always fit. If you prefer the normal \LaTeX\ way, use |\oldbraces| to reset everything. This new behaviour should be extended to other characters like \verb~| [ { <~ and so on. Maybe in version 0.0.1…
% 
% I would have never been able to implement this without the help of the mailinglist members of |tex-d-l@listserv.dfn.de|!
% 
% The redefinition of |\mathstrut| is necessary when using amsmath (you will use amsmath when typesetting formulae, won’t you?), because the hight of formulae is determinated by the hight of a brace. But using ( ) as |\active| characters, we need another brace here. So we take |[|. This will probably also change. But the code is working fine for ( ).\todo{Maybe one could ”temporarily hardcode“ the hight of [ and then use this…}
%    \begin{macrocode}
\makeatletter
\def\resetMathstrut@{%
  \setbox\z@\hbox{%
    \mathchardef\@tempa\mathcode`\[\relax
    \def\@tempb##1"##2##3{\the\textfont"##3\char"}%
    \expandafter\@tempb\meaning\@tempa \relax
}%
  \ht\Mathstrutbox@\ht\z@ \dp\Mathstrutbox@\dp\z@
}
\makeatother

\edef\oldbraces{
  \mathcode`(\the\mathcode`(
  \mathcode`)\the\mathcode`)
}
\begingroup
  \catcode`(\active \xdef({\left\string(}
  \catcode`)\active \xdef){\right\string)}
\endgroup
\def\newbraces{

  \mathcode`("8000
  \mathcode`)"8000
}
%    \end{macrocode}
% \end{macro}
% \end{macro}

% \begin{environment}{hugedisplaymath}
% Sometimes, especially in presentations, you might need an really big formula. Imagine two hours of struggle with transformations—and finally there is the beautiful formula. Now you can say\\
% \begin{center}|\begin{hugedisplaymath} E = mc^2 \end{hugedisplaymath}| \end{center}
% There should be several steps of size, maybe.
%    \begin{macrocode}
\def\hugedisplaymath{
  \makeatletter
    \makeatother
  \Huge
    \begin{equation*}
}
\def\endhugedisplaymath{
  \end{equation*}
}
%    \end{macrocode}
% \end{environment}
% 
% \section{itemize and similar things}
% \subsection{itemize with a single character}
% \begin{macro}{• instead of \item}
% Here we use an active character (mostly a unicode character bullet •) for the whole construct. And another one for nested itemizations (like a triangular bullet \nolinebreak{\fontspec[Scale=0.8]{DejaVu Sans Mono}‣})
% 
% This does not—guess it— work correctly so far. I’m trying to find a tricky way so that the ending character is not necessary any more. So far one has to end an itemize with something like an |—|. There will also be a possibility to change the characters responsible for the whole action.
%    \begin{macrocode}

\catcode`\•=\active
\catcode`\‣=\active
\makeatletter
\def\notinside{}
\def\inside{}
\let\insideitemizei\outside
\let\insideitemizeii\outside

\def•{
  \ifx\insideitemizei\inside
    \item
  \else
    \begin{itemize}
      \global\let\insideitemizei\inside
      \item 
  \fi
}

\def‣{
  \ifx\insideitemizeii\inside
    \item
  \else
    \begin{itemize}
      \global\let\insideitemizeii\inside
      \item 
  \fi
}

%    \end{macrocode}
% \end{macro}
% \Finale
\endinput